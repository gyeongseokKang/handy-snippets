{
  "export default component": {
    "prefix": "edc",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return <>$2</>;",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "export default component"
  },
  "export default function": {
    "prefix": "edf",
    "body": [
      "const ${1:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}} = () => {",
      "  return;",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "export default function"
  },
  "export default component with props": {
    "prefix": "edcp",
    "body": [
      "interface ${1:${TM_FILENAME_BASE}}Props {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = ({}: ${1:${TM_FILENAME_BASE}}Props) => {",
      "  return <>$2</>;",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "export default component with props"
  },
  "zustand store": {
    "prefix": "zs",
    "body": [
      "import { create } from \"zustand\";",
      "",
      "type State = {};",
      "",
      "type Actions = {",
      "  reset: () => void;",
      "};",
      "",
      "const initialState: State = {};",
      "",
      "const use${1:${TM_FILENAME_BASE}} = create<State & Actions>((set) => ({",
      "  ...initialState,",
      "  reset: () => set(initialState),",
      "}));",
      "export default use${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "zustand store"
  },
  "zustand store with devtools": {
    "prefix": "zsd",
    "body": [
      "import { create } from \"zustand\";",
      "import { devtools } from \"zustand/middleware/devtools\";",
      "",
      "type State = {};",
      "",
      "type Actions = {",
      "  reset: () => void;",
      "};",
      "",
      "const initialState: State = {};",
      "",
      "const use${1:${TM_FILENAME_BASE}} = create(",
      "  devtools<State & Actions>((set) => ({",
      "    ...initialState,",
      "    reset: () => set(initialState),",
      "  }))",
      ");",
      "export default use${1:${TM_FILENAME_BASE}};"
    ],
    "description": "zustand store with devtools"
  },
  "zustand store with immer": {
    "prefix": "zsi",
    "body": [
      "import { create } from \"zustand\";",
      "import { immer } from \"zustand/middleware/immer\";",
      "",
      "type State = {$2};",
      "",
      "type Actions = {",
      "  reset: () => void;",
      "};",
      "",
      "const initialState: State = {$2};",
      "",
      "const use${1:${TM_FILENAME_BASE}} = create(",
      "  immer<State & Actions>((set) => ({",
      "    ...initialState,",
      "    reset: () => set(initialState),",
      "  }))",
      ");",
      "",
      "export default use${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "zustand store with immer"
  },
  "zustand store with persist": {
    "prefix": "zsp",
    "body": [
      "import { create } from \"zustand\";",
      "import { createJSONStorage, persist } from \"zustand/middleware\";",
      "",
      "type State = {};",
      "",
      "type Actions = {",
      "  reset: () => void;",
      "};",
      "",
      "const initialState: State = {};",
      "",
      "const use${1:${TM_FILENAME_BASE}} = create<State & Actions>()(",
      "  persist(",
      "    (set) => ({",
      "      ...initialState,",
      "      reset: () => {",
      "        set(initialState);",
      "      },",
      "    }),",
      "    {",
      "      name: \"${1:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}}-storage\",",
      "      storage: createJSONStorage(() => ${2|localStorage,sessionStorage|}),",
      "    }",
      "  )",
      ");",
      "",
      "export default use${1:${TM_FILENAME_BASE}};"
    ],
    "description": "zustand store with persist"
  },
  "zustand store with devtools, immer": {
    "prefix": "zsdi",
    "body": [
      "import { create } from \"zustand\";",
      "import { devtools } from \"zustand/middleware/devtools\";",
      "import { immer } from \"zustand/middleware/immer\";",
      "",
      "type State = {};",
      "",
      "type Actions = {",
      "  reset: () => void;",
      "};",
      "",
      "const initialState: State = {};",
      "",
      "const use${1:${TM_FILENAME_BASE}} = create(",
      "  devtools(",
      "    immer<State & Actions>((set) => ({",
      "      ...initialState,",
      "      reset: () => set(initialState),",
      "    }))",
      "  )",
      ");",
      "",
      "export default use${1:${TM_FILENAME_BASE}};"
    ],
    "description": "zustand store with devtools, immer"
  },
  "zustand store with persist, immer": {
    "prefix": "zspi",
    "body": [
      "import { create } from \"zustand\";",
      "import { createJSONStorage, persist } from \"zustand/middleware\";",
      "import { immer } from \"zustand/middleware/immer\";",
      "",
      "type State = {};",
      "",
      "type Actions = {",
      "  reset: () => void;",
      "};",
      "",
      "const initialState: State = {};",
      "",
      "const use${1:${TM_FILENAME_BASE}} = create<State & Actions>()(",
      "  persist(",
      "    immer((set) => ({",
      "      ...initialState,",
      "      reset: () => {",
      "        set(initialState);",
      "      },",
      "    })),",
      "    {",
      "      name: \"${1:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}}-storage\",",
      "      storage: createJSONStorage(() => ${2|localStorage,sessionStorage|}),",
      "    }",
      "  )",
      ");",
      "",
      "export default use${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "zustand store with immer, persist"
  },
  "zustand store with devtools, persist, immer": {
    "prefix": "zsdpi",
    "body": [
      "import { create } from \"zustand\";",
      "import { createJSONStorage, persist } from \"zustand/middleware\";",
      "import { devtools } from \"zustand/middleware/devtools\";",
      "import { immer } from \"zustand/middleware/immer\";",
      "",
      "type State = {};",
      "",
      "type Actions = {",
      "  reset: () => void;",
      "};",
      "",
      "const initialState: State = {};",
      "",
      "const use${1:${TM_FILENAME_BASE}} = create<State & Actions>()(",
      "  devtools(",
      "    persist(",
      "      immer((set) => ({",
      "        ...initialState,",
      "        reset: () => {",
      "          set(initialState);",
      "        },",
      "      })),",
      "      {",
      "        name: \"postRecommendHistory-storage\",",
      "        storage: createJSONStorage(() => localStorage),",
      "      }",
      "    )",
      "  )",
      ");",
      "",
      "export default use${1:${TM_FILENAME_BASE}};"
    ],
    "description": "zustand store with immer, persist, devtools"
  }
}
